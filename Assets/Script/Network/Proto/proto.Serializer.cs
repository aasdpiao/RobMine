// This is the backend code for reading and writing

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;

namespace Msg
{
    public partial class QuickRegister
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static QuickRegister Deserialize(Stream stream)
        {
            QuickRegister instance = new QuickRegister();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static QuickRegister DeserializeLengthDelimited(Stream stream)
        {
            QuickRegister instance = new QuickRegister();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static QuickRegister Deserialize(byte[] buffer)
        {
            QuickRegister instance = new QuickRegister();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.QuickRegister Deserialize(byte[] buffer, Msg.QuickRegister instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.QuickRegister Deserialize(Stream stream, Msg.QuickRegister instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Account = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasAccount = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Passwd = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasPasswd = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.QuickRegister DeserializeLengthDelimited(Stream stream, Msg.QuickRegister instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Account = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasAccount = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Passwd = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasPasswd = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, QuickRegister instance)
        {
            if (instance.Account != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Account));
            }
            if (instance.Passwd != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Passwd));
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(QuickRegister instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class GameServer
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GameServer Deserialize(Stream stream)
        {
            GameServer instance = new GameServer();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GameServer DeserializeLengthDelimited(Stream stream)
        {
            GameServer instance = new GameServer();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static GameServer Deserialize(byte[] buffer)
        {
            GameServer instance = new GameServer();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.GameServer Deserialize(byte[] buffer, Msg.GameServer instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.GameServer Deserialize(Stream stream, Msg.GameServer instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Ip = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasIp = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Port = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPort = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.GameServer DeserializeLengthDelimited(Stream stream, Msg.GameServer instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Ip = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasIp = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Port = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPort = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, GameServer instance)
        {
            if (instance.Ip != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Ip));
            }
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Port);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(GameServer instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class RString
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static RString Deserialize(Stream stream)
        {
            RString instance = new RString();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static RString DeserializeLengthDelimited(Stream stream)
        {
            RString instance = new RString();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static RString Deserialize(byte[] buffer)
        {
            RString instance = new RString();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.RString Deserialize(byte[] buffer, Msg.RString instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.RString Deserialize(Stream stream, Msg.RString instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Str = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasStr = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.RString DeserializeLengthDelimited(Stream stream, Msg.RString instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Str = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasStr = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, RString instance)
        {
            if (instance.Str != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Str));
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(RString instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class MsgTip
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MsgTip Deserialize(Stream stream)
        {
            MsgTip instance = new MsgTip();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MsgTip DeserializeLengthDelimited(Stream stream)
        {
            MsgTip instance = new MsgTip();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static MsgTip Deserialize(byte[] buffer)
        {
            MsgTip instance = new MsgTip();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.MsgTip Deserialize(byte[] buffer, Msg.MsgTip instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.MsgTip Deserialize(Stream stream, Msg.MsgTip instance)
        {
            if (instance.Value == null)
                instance.Value = new List<string>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Tip = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasTip = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    // repeated
                    instance.Value.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                    instance.hasValue = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasType = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.MsgTip DeserializeLengthDelimited(Stream stream, Msg.MsgTip instance)
        {
            if (instance.Value == null)
                instance.Value = new List<string>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Tip = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasTip = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    // repeated
                    instance.Value.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                    instance.hasValue = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasType = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, MsgTip instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Tip);
            if (instance.Value != null)
            {
                foreach (var i2 in instance.Value)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(i2));
                }
            }
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Type);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(MsgTip instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class SrvVersion
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SrvVersion Deserialize(Stream stream)
        {
            SrvVersion instance = new SrvVersion();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SrvVersion DeserializeLengthDelimited(Stream stream)
        {
            SrvVersion instance = new SrvVersion();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static SrvVersion Deserialize(byte[] buffer)
        {
            SrvVersion instance = new SrvVersion();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.SrvVersion Deserialize(byte[] buffer, Msg.SrvVersion instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.SrvVersion Deserialize(Stream stream, Msg.SrvVersion instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Version = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasVersion = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.SrvVersion DeserializeLengthDelimited(Stream stream, Msg.SrvVersion instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Version = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasVersion = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, SrvVersion instance)
        {
            if (instance.Version != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Version));
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(SrvVersion instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class Login
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Login Deserialize(Stream stream)
        {
            Login instance = new Login();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Login DeserializeLengthDelimited(Stream stream)
        {
            Login instance = new Login();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Login Deserialize(byte[] buffer)
        {
            Login instance = new Login();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.Login Deserialize(byte[] buffer, Msg.Login instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.Login Deserialize(Stream stream, Msg.Login instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Account = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasAccount = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Password = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasPassword = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Result = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                    instance.hasResult = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.Accid = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasAccid = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.Logintime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasLogintime = true;
                    continue;
                    // Field 6 Varint
                case 48:
                    instance.Pf = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPf = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.Login DeserializeLengthDelimited(Stream stream, Msg.Login instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Account = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasAccount = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Password = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasPassword = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Result = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                    instance.hasResult = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.Accid = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasAccid = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.Logintime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasLogintime = true;
                    continue;
                    // Field 6 Varint
                case 48:
                    instance.Pf = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPf = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Login instance)
        {
            if (instance.Account != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Account));
            }
            if (instance.Password != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Password));
            }
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Result);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Accid);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Logintime);
            // Key for field: 6, Varint
            stream.WriteByte(48);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Pf);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Login instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class Server
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Server Deserialize(Stream stream)
        {
            Server instance = new Server();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Server DeserializeLengthDelimited(Stream stream)
        {
            Server instance = new Server();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Server Deserialize(byte[] buffer)
        {
            Server instance = new Server();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.Server Deserialize(byte[] buffer, Msg.Server instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.Server Deserialize(Stream stream, Msg.Server instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance._Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.has_Id = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Ip = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasIp = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Port = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPort = true;
                    continue;
                    // Field 4 LengthDelimited
                case 34:
                    instance.Node = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasNode = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasType = true;
                    continue;
                    // Field 6 Varint
                case 48:
                    instance.Num = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasNum = true;
                    continue;
                    // Field 7 Varint
                case 56:
                    instance.Flag = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasFlag = true;
                    continue;
                    // Field 8 LengthDelimited
                case 66:
                    instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasName = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.Server DeserializeLengthDelimited(Stream stream, Msg.Server instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance._Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.has_Id = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Ip = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasIp = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Port = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPort = true;
                    continue;
                    // Field 4 LengthDelimited
                case 34:
                    instance.Node = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasNode = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasType = true;
                    continue;
                    // Field 6 Varint
                case 48:
                    instance.Num = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasNum = true;
                    continue;
                    // Field 7 Varint
                case 56:
                    instance.Flag = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasFlag = true;
                    continue;
                    // Field 8 LengthDelimited
                case 66:
                    instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasName = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Server instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance._Id);
            if (instance.Ip != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Ip));
            }
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Port);
            if (instance.Node != null)
            {
                // Key for field: 4, LengthDelimited
                stream.WriteByte(34);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Node));
            }
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Type);
            // Key for field: 6, Varint
            stream.WriteByte(48);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Num);
            // Key for field: 7, Varint
            stream.WriteByte(56);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Flag);
            if (instance.Name != null)
            {
                // Key for field: 8, LengthDelimited
                stream.WriteByte(66);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Name));
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Server instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class MsgServerTime
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MsgServerTime Deserialize(Stream stream)
        {
            MsgServerTime instance = new MsgServerTime();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MsgServerTime DeserializeLengthDelimited(Stream stream)
        {
            MsgServerTime instance = new MsgServerTime();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static MsgServerTime Deserialize(byte[] buffer)
        {
            MsgServerTime instance = new MsgServerTime();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.MsgServerTime Deserialize(byte[] buffer, Msg.MsgServerTime instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.MsgServerTime Deserialize(Stream stream, Msg.MsgServerTime instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Servertime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasServertime = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.StartTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasStartTime = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.MsgServerTime DeserializeLengthDelimited(Stream stream, Msg.MsgServerTime instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Servertime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasServertime = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.StartTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasStartTime = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, MsgServerTime instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Servertime);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.StartTime);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(MsgServerTime instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class Property
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Property Deserialize(Stream stream)
        {
            Property instance = new Property();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Property DeserializeLengthDelimited(Stream stream)
        {
            Property instance = new Property();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Property Deserialize(byte[] buffer)
        {
            Property instance = new Property();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.Property Deserialize(byte[] buffer, Msg.Property instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.Property Deserialize(Stream stream, Msg.Property instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasType = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Value = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasValue = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.Property DeserializeLengthDelimited(Stream stream, Msg.Property instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasType = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Value = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasValue = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Property instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Type);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Value);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Property instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class PlayerInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerInfo Deserialize(Stream stream)
        {
            PlayerInfo instance = new PlayerInfo();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerInfo DeserializeLengthDelimited(Stream stream)
        {
            PlayerInfo instance = new PlayerInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PlayerInfo Deserialize(byte[] buffer)
        {
            PlayerInfo instance = new PlayerInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.PlayerInfo Deserialize(byte[] buffer, Msg.PlayerInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.PlayerInfo Deserialize(Stream stream, Msg.PlayerInfo instance)
        {
            BinaryReader br = new BinaryReader(stream);
            if (instance.Prob == null)
                instance.Prob = new List<Msg.Property>();
            if (instance.UnlockGold == null)
                instance.UnlockGold = new List<uint>();
            if (instance.UnlockRate == null)
                instance.UnlockRate = new List<uint>();
            if (instance.UnlockClothes == null)
                instance.UnlockClothes = new List<uint>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Account = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasAccount = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Nickname = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasNickname = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Gold = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasGold = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.Head = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasHead = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.Accid = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasAccid = true;
                    continue;
                    // Field 6 Varint
                case 48:
                    instance.PlayerId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPlayerId = true;
                    continue;
                    // Field 7 Fixed32
                case 61:
                    instance.Exp = br.ReadSingle();
                    instance.hasExp = true;
                    continue;
                    // Field 8 Varint
                case 64:
                    instance.Lv = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasLv = true;
                    continue;
                    // Field 9 Fixed32
                case 77:
                    instance.VipExp = br.ReadSingle();
                    instance.hasVipExp = true;
                    continue;
                    // Field 10 Varint
                case 80:
                    instance.VipLv = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasVipLv = true;
                    continue;
                    // Field 11 Varint
                case 88:
                    instance.Dress = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasDress = true;
                    continue;
                    // Field 12 Varint
                case 96:
                    instance.Pool = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                    instance.hasPool = true;
                    continue;
                    // Field 13 LengthDelimited
                case 106:
                    // repeated
                    instance.Prob.Add(Msg.Property.DeserializeLengthDelimited(stream));
                    instance.hasProb = true;
                    continue;
                    // Field 14 Varint
                case 112:
                    // repeated
                    instance.UnlockGold.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream));
                    instance.hasUnlockGold = true;
                    continue;
                    // Field 15 Varint
                case 120:
                    // repeated
                    instance.UnlockRate.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream));
                    instance.hasUnlockRate = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                case 16:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    // repeated
                    instance.UnlockClothes.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream));
                    instance.hasUnlockClothes = true;
                    continue;
                case 17:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.MapId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasMapId = true;
                    continue;
                case 18:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.IsNew = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasIsNew = true;
                    continue;
                case 19:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.IsFirstLogin = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasIsFirstLogin = true;
                    continue;
                case 20:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.Sign = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasSign = true;
                    continue;
                case 21:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.TimeGold = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasTimeGold = true;
                    continue;
                case 22:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.Guide = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasGuide = true;
                    continue;
                case 23:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.FreeTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasFreeTime = true;
                    continue;
                case 24:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.VipGift = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasVipGift = true;
                    continue;
                case 25:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.Relogin = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasRelogin = true;
                    continue;
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.PlayerInfo DeserializeLengthDelimited(Stream stream, Msg.PlayerInfo instance)
        {
            BinaryReader br = new BinaryReader(stream);
            if (instance.Prob == null)
                instance.Prob = new List<Msg.Property>();
            if (instance.UnlockGold == null)
                instance.UnlockGold = new List<uint>();
            if (instance.UnlockRate == null)
                instance.UnlockRate = new List<uint>();
            if (instance.UnlockClothes == null)
                instance.UnlockClothes = new List<uint>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Account = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasAccount = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Nickname = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasNickname = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Gold = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasGold = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.Head = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasHead = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.Accid = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasAccid = true;
                    continue;
                    // Field 6 Varint
                case 48:
                    instance.PlayerId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPlayerId = true;
                    continue;
                    // Field 7 Fixed32
                case 61:
                    instance.Exp = br.ReadSingle();
                    instance.hasExp = true;
                    continue;
                    // Field 8 Varint
                case 64:
                    instance.Lv = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasLv = true;
                    continue;
                    // Field 9 Fixed32
                case 77:
                    instance.VipExp = br.ReadSingle();
                    instance.hasVipExp = true;
                    continue;
                    // Field 10 Varint
                case 80:
                    instance.VipLv = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasVipLv = true;
                    continue;
                    // Field 11 Varint
                case 88:
                    instance.Dress = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasDress = true;
                    continue;
                    // Field 12 Varint
                case 96:
                    instance.Pool = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                    instance.hasPool = true;
                    continue;
                    // Field 13 LengthDelimited
                case 106:
                    // repeated
                    instance.Prob.Add(Msg.Property.DeserializeLengthDelimited(stream));
                    instance.hasProb = true;
                    continue;
                    // Field 14 Varint
                case 112:
                    // repeated
                    instance.UnlockGold.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream));
                    instance.hasUnlockGold = true;
                    continue;
                    // Field 15 Varint
                case 120:
                    // repeated
                    instance.UnlockRate.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream));
                    instance.hasUnlockRate = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                case 16:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    // repeated
                    instance.UnlockClothes.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream));
                    instance.hasUnlockClothes = true;
                    continue;
                case 17:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.MapId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasMapId = true;
                    continue;
                case 18:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.IsNew = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasIsNew = true;
                    continue;
                case 19:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.IsFirstLogin = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasIsFirstLogin = true;
                    continue;
                case 20:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.Sign = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasSign = true;
                    continue;
                case 21:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.TimeGold = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasTimeGold = true;
                    continue;
                case 22:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.Guide = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasGuide = true;
                    continue;
                case 23:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.FreeTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasFreeTime = true;
                    continue;
                case 24:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.VipGift = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasVipGift = true;
                    continue;
                case 25:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.Relogin = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasRelogin = true;
                    continue;
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PlayerInfo instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            if (instance.Account != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Account));
            }
            if (instance.Nickname != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Nickname));
            }
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Gold);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Head);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Accid);
            // Key for field: 6, Varint
            stream.WriteByte(48);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.PlayerId);
            // Key for field: 7, Fixed32
            stream.WriteByte(61);
            bw.Write(instance.Exp);
            // Key for field: 8, Varint
            stream.WriteByte(64);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Lv);
            // Key for field: 9, Fixed32
            stream.WriteByte(77);
            bw.Write(instance.VipExp);
            // Key for field: 10, Varint
            stream.WriteByte(80);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.VipLv);
            // Key for field: 11, Varint
            stream.WriteByte(88);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Dress);
            // Key for field: 12, Varint
            stream.WriteByte(96);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, instance.Pool);
            if (instance.Prob != null)
            {
                foreach (var i13 in instance.Prob)
                {
                    // Key for field: 13, LengthDelimited
                    stream.WriteByte(106);
                    ﻿using (var ms13 = new MemoryStream())
                    {
                        Msg.Property.Serialize(ms13, i13);
                        // Length delimited byte array
                        uint ms13Length = (uint)ms13.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, ms13Length);
                        stream.Write(ms13.GetBuffer(), 0, (int)ms13Length);
                    }
                    
                }
            }
            if (instance.UnlockGold != null)
            {
                foreach (var i14 in instance.UnlockGold)
                {
                    // Key for field: 14, Varint
                    stream.WriteByte(112);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, i14);
                }
            }
            if (instance.UnlockRate != null)
            {
                foreach (var i15 in instance.UnlockRate)
                {
                    // Key for field: 15, Varint
                    stream.WriteByte(120);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, i15);
                }
            }
            if (instance.UnlockClothes != null)
            {
                foreach (var i16 in instance.UnlockClothes)
                {
                    // Key for field: 16, Varint
                    stream.Write(new byte[]{128, 1}, 0, 2);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, i16);
                }
            }
            // Key for field: 17, Varint
            stream.Write(new byte[]{136, 1}, 0, 2);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.MapId);
            // Key for field: 18, Varint
            stream.Write(new byte[]{144, 1}, 0, 2);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.IsNew);
            // Key for field: 19, Varint
            stream.Write(new byte[]{152, 1}, 0, 2);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.IsFirstLogin);
            // Key for field: 20, Varint
            stream.Write(new byte[]{160, 1}, 0, 2);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Sign);
            // Key for field: 21, Varint
            stream.Write(new byte[]{168, 1}, 0, 2);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.TimeGold);
            // Key for field: 22, Varint
            stream.Write(new byte[]{176, 1}, 0, 2);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Guide);
            // Key for field: 23, Varint
            stream.Write(new byte[]{184, 1}, 0, 2);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.FreeTime);
            // Key for field: 24, Varint
            stream.Write(new byte[]{192, 1}, 0, 2);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.VipGift);
            // Key for field: 25, Varint
            stream.Write(new byte[]{200, 1}, 0, 2);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Relogin);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PlayerInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class PlayerDetail
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerDetail Deserialize(Stream stream)
        {
            PlayerDetail instance = new PlayerDetail();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerDetail DeserializeLengthDelimited(Stream stream)
        {
            PlayerDetail instance = new PlayerDetail();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PlayerDetail Deserialize(byte[] buffer)
        {
            PlayerDetail instance = new PlayerDetail();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.PlayerDetail Deserialize(byte[] buffer, Msg.PlayerDetail instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.PlayerDetail Deserialize(Stream stream, Msg.PlayerDetail instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance._Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.has_Id = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.PlayerId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPlayerId = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.MostCoinCount = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasMostCoinCount = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.CollectCoinCount = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasCollectCoinCount = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.GetClothCount = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasGetClothCount = true;
                    continue;
                    // Field 6 Varint
                case 48:
                    instance.CostCoinCount = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasCostCoinCount = true;
                    continue;
                    // Field 7 Varint
                case 56:
                    instance.PutCoinCount = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPutCoinCount = true;
                    continue;
                    // Field 8 Varint
                case 64:
                    instance.PowerCoinTimes = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPowerCoinTimes = true;
                    continue;
                    // Field 9 Varint
                case 72:
                    instance.PushAllTimes = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPushAllTimes = true;
                    continue;
                    // Field 10 Varint
                case 80:
                    instance.WallTimes = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasWallTimes = true;
                    continue;
                    // Field 11 Varint
                case 88:
                    instance.FreezeCollectionCount = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasFreezeCollectionCount = true;
                    continue;
                    // Field 12 Varint
                case 96:
                    instance.AccelerateCollectionCount = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasAccelerateCollectionCount = true;
                    continue;
                    // Field 13 Varint
                case 104:
                    instance.SharkCollectionCount = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasSharkCollectionCount = true;
                    continue;
                    // Field 14 Varint
                case 112:
                    instance.FiftyTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasFiftyTime = true;
                    continue;
                    // Field 15 Varint
                case 120:
                    instance.HundredTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasHundredTime = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                case 16:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.ThreeHundredTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasThreeHundredTime = true;
                    continue;
                case 17:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.FiveHundredTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasFiveHundredTime = true;
                    continue;
                case 18:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.HitCrowTimes = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasHitCrowTimes = true;
                    continue;
                case 19:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.FiftyFreeTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasFiftyFreeTime = true;
                    continue;
                case 20:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.TwentyFreeTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasTwentyFreeTime = true;
                    continue;
                case 21:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.SuperDrawTimes = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasSuperDrawTimes = true;
                    continue;
                case 22:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.RotateTimes = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasRotateTimes = true;
                    continue;
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.PlayerDetail DeserializeLengthDelimited(Stream stream, Msg.PlayerDetail instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance._Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.has_Id = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.PlayerId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPlayerId = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.MostCoinCount = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasMostCoinCount = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.CollectCoinCount = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasCollectCoinCount = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.GetClothCount = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasGetClothCount = true;
                    continue;
                    // Field 6 Varint
                case 48:
                    instance.CostCoinCount = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasCostCoinCount = true;
                    continue;
                    // Field 7 Varint
                case 56:
                    instance.PutCoinCount = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPutCoinCount = true;
                    continue;
                    // Field 8 Varint
                case 64:
                    instance.PowerCoinTimes = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPowerCoinTimes = true;
                    continue;
                    // Field 9 Varint
                case 72:
                    instance.PushAllTimes = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPushAllTimes = true;
                    continue;
                    // Field 10 Varint
                case 80:
                    instance.WallTimes = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasWallTimes = true;
                    continue;
                    // Field 11 Varint
                case 88:
                    instance.FreezeCollectionCount = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasFreezeCollectionCount = true;
                    continue;
                    // Field 12 Varint
                case 96:
                    instance.AccelerateCollectionCount = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasAccelerateCollectionCount = true;
                    continue;
                    // Field 13 Varint
                case 104:
                    instance.SharkCollectionCount = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasSharkCollectionCount = true;
                    continue;
                    // Field 14 Varint
                case 112:
                    instance.FiftyTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasFiftyTime = true;
                    continue;
                    // Field 15 Varint
                case 120:
                    instance.HundredTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasHundredTime = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                case 16:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.ThreeHundredTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasThreeHundredTime = true;
                    continue;
                case 17:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.FiveHundredTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasFiveHundredTime = true;
                    continue;
                case 18:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.HitCrowTimes = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasHitCrowTimes = true;
                    continue;
                case 19:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.FiftyFreeTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasFiftyFreeTime = true;
                    continue;
                case 20:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.TwentyFreeTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasTwentyFreeTime = true;
                    continue;
                case 21:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.SuperDrawTimes = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasSuperDrawTimes = true;
                    continue;
                case 22:
                    if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                        break;
                    instance.RotateTimes = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasRotateTimes = true;
                    continue;
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PlayerDetail instance)
        {
            if (instance._Id != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance._Id));
            }
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.PlayerId);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.MostCoinCount);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.CollectCoinCount);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.GetClothCount);
            // Key for field: 6, Varint
            stream.WriteByte(48);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.CostCoinCount);
            // Key for field: 7, Varint
            stream.WriteByte(56);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.PutCoinCount);
            // Key for field: 8, Varint
            stream.WriteByte(64);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.PowerCoinTimes);
            // Key for field: 9, Varint
            stream.WriteByte(72);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.PushAllTimes);
            // Key for field: 10, Varint
            stream.WriteByte(80);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.WallTimes);
            // Key for field: 11, Varint
            stream.WriteByte(88);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.FreezeCollectionCount);
            // Key for field: 12, Varint
            stream.WriteByte(96);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.AccelerateCollectionCount);
            // Key for field: 13, Varint
            stream.WriteByte(104);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.SharkCollectionCount);
            // Key for field: 14, Varint
            stream.WriteByte(112);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.FiftyTime);
            // Key for field: 15, Varint
            stream.WriteByte(120);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.HundredTime);
            // Key for field: 16, Varint
            stream.Write(new byte[]{128, 1}, 0, 2);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.ThreeHundredTime);
            // Key for field: 17, Varint
            stream.Write(new byte[]{136, 1}, 0, 2);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.FiveHundredTime);
            // Key for field: 18, Varint
            stream.Write(new byte[]{144, 1}, 0, 2);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.HitCrowTimes);
            // Key for field: 19, Varint
            stream.Write(new byte[]{152, 1}, 0, 2);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.FiftyFreeTime);
            // Key for field: 20, Varint
            stream.Write(new byte[]{160, 1}, 0, 2);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.TwentyFreeTime);
            // Key for field: 21, Varint
            stream.Write(new byte[]{168, 1}, 0, 2);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.SuperDrawTimes);
            // Key for field: 22, Varint
            stream.Write(new byte[]{176, 1}, 0, 2);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.RotateTimes);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PlayerDetail instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class CreatePlayer
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CreatePlayer Deserialize(Stream stream)
        {
            CreatePlayer instance = new CreatePlayer();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CreatePlayer DeserializeLengthDelimited(Stream stream)
        {
            CreatePlayer instance = new CreatePlayer();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CreatePlayer Deserialize(byte[] buffer)
        {
            CreatePlayer instance = new CreatePlayer();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.CreatePlayer Deserialize(byte[] buffer, Msg.CreatePlayer instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.CreatePlayer Deserialize(Stream stream, Msg.CreatePlayer instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Accid = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasAccid = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasName = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Gender = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasGender = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.Result = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasResult = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.CreatePlayer DeserializeLengthDelimited(Stream stream, Msg.CreatePlayer instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Accid = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasAccid = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasName = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Gender = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasGender = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.Result = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasResult = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CreatePlayer instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Accid);
            if (instance.Name != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Name));
            }
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Gender);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Result);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CreatePlayer instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class VipInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static VipInfo Deserialize(Stream stream)
        {
            VipInfo instance = new VipInfo();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static VipInfo DeserializeLengthDelimited(Stream stream)
        {
            VipInfo instance = new VipInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static VipInfo Deserialize(byte[] buffer)
        {
            VipInfo instance = new VipInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.VipInfo Deserialize(byte[] buffer, Msg.VipInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.VipInfo Deserialize(Stream stream, Msg.VipInfo instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance._Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.has_Id = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.PlayerId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPlayerId = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Lv = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasLv = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.Exp = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasExp = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.Rmb = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasRmb = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.VipInfo DeserializeLengthDelimited(Stream stream, Msg.VipInfo instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance._Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.has_Id = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.PlayerId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPlayerId = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Lv = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasLv = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.Exp = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasExp = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.Rmb = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasRmb = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, VipInfo instance)
        {
            if (instance._Id != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance._Id));
            }
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.PlayerId);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Lv);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Exp);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Rmb);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(VipInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class Item
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Item Deserialize(Stream stream)
        {
            Item instance = new Item();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Item DeserializeLengthDelimited(Stream stream)
        {
            Item instance = new Item();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Item Deserialize(byte[] buffer)
        {
            Item instance = new Item();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.Item Deserialize(byte[] buffer, Msg.Item instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.Item Deserialize(Stream stream, Msg.Item instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance._Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.has_Id = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.PlayerId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPlayerId = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.Num = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasNum = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.Item DeserializeLengthDelimited(Stream stream, Msg.Item instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance._Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.has_Id = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.PlayerId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPlayerId = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.Num = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasNum = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Item instance)
        {
            if (instance._Id != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance._Id));
            }
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.PlayerId);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Num);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Item instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class ItemData
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ItemData Deserialize(Stream stream)
        {
            ItemData instance = new ItemData();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ItemData DeserializeLengthDelimited(Stream stream)
        {
            ItemData instance = new ItemData();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ItemData Deserialize(byte[] buffer)
        {
            ItemData instance = new ItemData();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.ItemData Deserialize(byte[] buffer, Msg.ItemData instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.ItemData Deserialize(Stream stream, Msg.ItemData instance)
        {
            if (instance.Items == null)
                instance.Items = new List<Msg.Item>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    // repeated
                    instance.Items.Add(Msg.Item.DeserializeLengthDelimited(stream));
                    instance.hasItems = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.ItemData DeserializeLengthDelimited(Stream stream, Msg.ItemData instance)
        {
            if (instance.Items == null)
                instance.Items = new List<Msg.Item>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    // repeated
                    instance.Items.Add(Msg.Item.DeserializeLengthDelimited(stream));
                    instance.hasItems = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ItemData instance)
        {
            if (instance.Items != null)
            {
                foreach (var i1 in instance.Items)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿using (var ms1 = new MemoryStream())
                    {
                        Msg.Item.Serialize(ms1, i1);
                        // Length delimited byte array
                        uint ms1Length = (uint)ms1.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, ms1Length);
                        stream.Write(ms1.GetBuffer(), 0, (int)ms1Length);
                    }
                    
                }
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ItemData instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class DeleteItem
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static DeleteItem Deserialize(Stream stream)
        {
            DeleteItem instance = new DeleteItem();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static DeleteItem DeserializeLengthDelimited(Stream stream)
        {
            DeleteItem instance = new DeleteItem();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static DeleteItem Deserialize(byte[] buffer)
        {
            DeleteItem instance = new DeleteItem();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.DeleteItem Deserialize(byte[] buffer, Msg.DeleteItem instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.DeleteItem Deserialize(Stream stream, Msg.DeleteItem instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.DeleteItem DeserializeLengthDelimited(Stream stream, Msg.DeleteItem instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, DeleteItem instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(DeleteItem instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class UseItem
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static UseItem Deserialize(Stream stream)
        {
            UseItem instance = new UseItem();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static UseItem DeserializeLengthDelimited(Stream stream)
        {
            UseItem instance = new UseItem();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static UseItem Deserialize(byte[] buffer)
        {
            UseItem instance = new UseItem();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.UseItem Deserialize(byte[] buffer, Msg.UseItem instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.UseItem Deserialize(Stream stream, Msg.UseItem instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Num = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasNum = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Result = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasResult = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.UseItem DeserializeLengthDelimited(Stream stream, Msg.UseItem instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Num = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasNum = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Result = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasResult = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, UseItem instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Num);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Result);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(UseItem instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class BuyItem
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BuyItem Deserialize(Stream stream)
        {
            BuyItem instance = new BuyItem();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BuyItem DeserializeLengthDelimited(Stream stream)
        {
            BuyItem instance = new BuyItem();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static BuyItem Deserialize(byte[] buffer)
        {
            BuyItem instance = new BuyItem();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.BuyItem Deserialize(byte[] buffer, Msg.BuyItem instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.BuyItem Deserialize(Stream stream, Msg.BuyItem instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.BuyItem DeserializeLengthDelimited(Stream stream, Msg.BuyItem instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, BuyItem instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(BuyItem instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class Email
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Email Deserialize(Stream stream)
        {
            Email instance = new Email();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Email DeserializeLengthDelimited(Stream stream)
        {
            Email instance = new Email();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Email Deserialize(byte[] buffer)
        {
            Email instance = new Email();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.Email Deserialize(byte[] buffer, Msg.Email instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.Email Deserialize(Stream stream, Msg.Email instance)
        {
            if (instance.Items == null)
                instance.Items = new List<Msg.Item>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance._Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.has_Id = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.EmailId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasEmailId = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Fid = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasFid = true;
                    continue;
                    // Field 4 LengthDelimited
                case 34:
                    instance.Fname = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasFname = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.Rid = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasRid = true;
                    continue;
                    // Field 6 LengthDelimited
                case 50:
                    instance.Rname = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasRname = true;
                    continue;
                    // Field 7 LengthDelimited
                case 58:
                    instance.Title = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasTitle = true;
                    continue;
                    // Field 8 LengthDelimited
                case 66:
                    instance.Content = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasContent = true;
                    continue;
                    // Field 9 LengthDelimited
                case 74:
                    // repeated
                    instance.Items.Add(Msg.Item.DeserializeLengthDelimited(stream));
                    instance.hasItems = true;
                    continue;
                    // Field 10 Varint
                case 80:
                    instance.State = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasState = true;
                    continue;
                    // Field 11 Varint
                case 88:
                    instance.Delaytime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasDelaytime = true;
                    continue;
                    // Field 12 Varint
                case 96:
                    instance.Readtime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasReadtime = true;
                    continue;
                    // Field 13 Varint
                case 104:
                    instance.Createtime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasCreatetime = true;
                    continue;
                    // Field 14 Varint
                case 112:
                    instance.Lifetime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasLifetime = true;
                    continue;
                    // Field 15 Varint
                case 120:
                    instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasType = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.Email DeserializeLengthDelimited(Stream stream, Msg.Email instance)
        {
            if (instance.Items == null)
                instance.Items = new List<Msg.Item>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance._Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.has_Id = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.EmailId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasEmailId = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Fid = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasFid = true;
                    continue;
                    // Field 4 LengthDelimited
                case 34:
                    instance.Fname = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasFname = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.Rid = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasRid = true;
                    continue;
                    // Field 6 LengthDelimited
                case 50:
                    instance.Rname = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasRname = true;
                    continue;
                    // Field 7 LengthDelimited
                case 58:
                    instance.Title = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasTitle = true;
                    continue;
                    // Field 8 LengthDelimited
                case 66:
                    instance.Content = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasContent = true;
                    continue;
                    // Field 9 LengthDelimited
                case 74:
                    // repeated
                    instance.Items.Add(Msg.Item.DeserializeLengthDelimited(stream));
                    instance.hasItems = true;
                    continue;
                    // Field 10 Varint
                case 80:
                    instance.State = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasState = true;
                    continue;
                    // Field 11 Varint
                case 88:
                    instance.Delaytime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasDelaytime = true;
                    continue;
                    // Field 12 Varint
                case 96:
                    instance.Readtime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasReadtime = true;
                    continue;
                    // Field 13 Varint
                case 104:
                    instance.Createtime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasCreatetime = true;
                    continue;
                    // Field 14 Varint
                case 112:
                    instance.Lifetime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasLifetime = true;
                    continue;
                    // Field 15 Varint
                case 120:
                    instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasType = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Email instance)
        {
            if (instance._Id != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance._Id));
            }
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.EmailId);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Fid);
            if (instance.Fname != null)
            {
                // Key for field: 4, LengthDelimited
                stream.WriteByte(34);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Fname));
            }
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Rid);
            if (instance.Rname != null)
            {
                // Key for field: 6, LengthDelimited
                stream.WriteByte(50);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Rname));
            }
            if (instance.Title != null)
            {
                // Key for field: 7, LengthDelimited
                stream.WriteByte(58);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Title));
            }
            if (instance.Content != null)
            {
                // Key for field: 8, LengthDelimited
                stream.WriteByte(66);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Content));
            }
            if (instance.Items != null)
            {
                foreach (var i9 in instance.Items)
                {
                    // Key for field: 9, LengthDelimited
                    stream.WriteByte(74);
                    ﻿using (var ms9 = new MemoryStream())
                    {
                        Msg.Item.Serialize(ms9, i9);
                        // Length delimited byte array
                        uint ms9Length = (uint)ms9.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, ms9Length);
                        stream.Write(ms9.GetBuffer(), 0, (int)ms9Length);
                    }
                    
                }
            }
            // Key for field: 10, Varint
            stream.WriteByte(80);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.State);
            // Key for field: 11, Varint
            stream.WriteByte(88);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Delaytime);
            // Key for field: 12, Varint
            stream.WriteByte(96);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Readtime);
            // Key for field: 13, Varint
            stream.WriteByte(104);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Createtime);
            // Key for field: 14, Varint
            stream.WriteByte(112);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Lifetime);
            // Key for field: 15, Varint
            stream.WriteByte(120);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Type);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Email instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class EmailData
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static EmailData Deserialize(Stream stream)
        {
            EmailData instance = new EmailData();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static EmailData DeserializeLengthDelimited(Stream stream)
        {
            EmailData instance = new EmailData();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static EmailData Deserialize(byte[] buffer)
        {
            EmailData instance = new EmailData();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.EmailData Deserialize(byte[] buffer, Msg.EmailData instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.EmailData Deserialize(Stream stream, Msg.EmailData instance)
        {
            if (instance.Emails == null)
                instance.Emails = new List<Msg.Email>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    // repeated
                    instance.Emails.Add(Msg.Email.DeserializeLengthDelimited(stream));
                    instance.hasEmails = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.EmailData DeserializeLengthDelimited(Stream stream, Msg.EmailData instance)
        {
            if (instance.Emails == null)
                instance.Emails = new List<Msg.Email>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    // repeated
                    instance.Emails.Add(Msg.Email.DeserializeLengthDelimited(stream));
                    instance.hasEmails = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, EmailData instance)
        {
            if (instance.Emails != null)
            {
                foreach (var i1 in instance.Emails)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿using (var ms1 = new MemoryStream())
                    {
                        Msg.Email.Serialize(ms1, i1);
                        // Length delimited byte array
                        uint ms1Length = (uint)ms1.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, ms1Length);
                        stream.Write(ms1.GetBuffer(), 0, (int)ms1Length);
                    }
                    
                }
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(EmailData instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class ReadEmail
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ReadEmail Deserialize(Stream stream)
        {
            ReadEmail instance = new ReadEmail();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ReadEmail DeserializeLengthDelimited(Stream stream)
        {
            ReadEmail instance = new ReadEmail();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ReadEmail Deserialize(byte[] buffer)
        {
            ReadEmail instance = new ReadEmail();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.ReadEmail Deserialize(byte[] buffer, Msg.ReadEmail instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.ReadEmail Deserialize(Stream stream, Msg.ReadEmail instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.ReadEmail DeserializeLengthDelimited(Stream stream, Msg.ReadEmail instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ReadEmail instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ReadEmail instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class GetEmailItem
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GetEmailItem Deserialize(Stream stream)
        {
            GetEmailItem instance = new GetEmailItem();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GetEmailItem DeserializeLengthDelimited(Stream stream)
        {
            GetEmailItem instance = new GetEmailItem();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static GetEmailItem Deserialize(byte[] buffer)
        {
            GetEmailItem instance = new GetEmailItem();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.GetEmailItem Deserialize(byte[] buffer, Msg.GetEmailItem instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.GetEmailItem Deserialize(Stream stream, Msg.GetEmailItem instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.GetEmailItem DeserializeLengthDelimited(Stream stream, Msg.GetEmailItem instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, GetEmailItem instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(GetEmailItem instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class DeleteEmail
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static DeleteEmail Deserialize(Stream stream)
        {
            DeleteEmail instance = new DeleteEmail();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static DeleteEmail DeserializeLengthDelimited(Stream stream)
        {
            DeleteEmail instance = new DeleteEmail();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static DeleteEmail Deserialize(byte[] buffer)
        {
            DeleteEmail instance = new DeleteEmail();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.DeleteEmail Deserialize(byte[] buffer, Msg.DeleteEmail instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.DeleteEmail Deserialize(Stream stream, Msg.DeleteEmail instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.DeleteEmail DeserializeLengthDelimited(Stream stream, Msg.DeleteEmail instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, DeleteEmail instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(DeleteEmail instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class ModifyHead
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ModifyHead Deserialize(Stream stream)
        {
            ModifyHead instance = new ModifyHead();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ModifyHead DeserializeLengthDelimited(Stream stream)
        {
            ModifyHead instance = new ModifyHead();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ModifyHead Deserialize(byte[] buffer)
        {
            ModifyHead instance = new ModifyHead();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.ModifyHead Deserialize(byte[] buffer, Msg.ModifyHead instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.ModifyHead Deserialize(Stream stream, Msg.ModifyHead instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.ModifyHead DeserializeLengthDelimited(Stream stream, Msg.ModifyHead instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ModifyHead instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ModifyHead instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class ModifyNickName
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ModifyNickName Deserialize(Stream stream)
        {
            ModifyNickName instance = new ModifyNickName();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ModifyNickName DeserializeLengthDelimited(Stream stream)
        {
            ModifyNickName instance = new ModifyNickName();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ModifyNickName Deserialize(byte[] buffer)
        {
            ModifyNickName instance = new ModifyNickName();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.ModifyNickName Deserialize(byte[] buffer, Msg.ModifyNickName instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.ModifyNickName Deserialize(Stream stream, Msg.ModifyNickName instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasName = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.ModifyNickName DeserializeLengthDelimited(Stream stream, Msg.ModifyNickName instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasName = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ModifyNickName instance)
        {
            if (instance.Name != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Name));
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ModifyNickName instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class Rotate
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Rotate Deserialize(Stream stream)
        {
            Rotate instance = new Rotate();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Rotate DeserializeLengthDelimited(Stream stream)
        {
            Rotate instance = new Rotate();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Rotate Deserialize(byte[] buffer)
        {
            Rotate instance = new Rotate();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.Rotate Deserialize(byte[] buffer, Msg.Rotate instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.Rotate Deserialize(Stream stream, Msg.Rotate instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.Rotate DeserializeLengthDelimited(Stream stream, Msg.Rotate instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Rotate instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Rotate instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class Sign
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Sign Deserialize(Stream stream)
        {
            Sign instance = new Sign();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Sign DeserializeLengthDelimited(Stream stream)
        {
            Sign instance = new Sign();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Sign Deserialize(byte[] buffer)
        {
            Sign instance = new Sign();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.Sign Deserialize(byte[] buffer, Msg.Sign instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.Sign Deserialize(Stream stream, Msg.Sign instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Week = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasWeek = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.State = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasState = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Value = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasValue = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.Sign DeserializeLengthDelimited(Stream stream, Msg.Sign instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Week = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasWeek = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.State = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasState = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Value = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasValue = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Sign instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Week);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.State);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Value);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Sign instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class SignInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SignInfo Deserialize(Stream stream)
        {
            SignInfo instance = new SignInfo();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SignInfo DeserializeLengthDelimited(Stream stream)
        {
            SignInfo instance = new SignInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static SignInfo Deserialize(byte[] buffer)
        {
            SignInfo instance = new SignInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.SignInfo Deserialize(byte[] buffer, Msg.SignInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.SignInfo Deserialize(Stream stream, Msg.SignInfo instance)
        {
            if (instance.Sign == null)
                instance.Sign = new List<Msg.Sign>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance._Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.has_Id = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.PlayerId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPlayerId = true;
                    continue;
                    // Field 3 LengthDelimited
                case 26:
                    // repeated
                    instance.Sign.Add(Msg.Sign.DeserializeLengthDelimited(stream));
                    instance.hasSign = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.SignInfo DeserializeLengthDelimited(Stream stream, Msg.SignInfo instance)
        {
            if (instance.Sign == null)
                instance.Sign = new List<Msg.Sign>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance._Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.has_Id = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.PlayerId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPlayerId = true;
                    continue;
                    // Field 3 LengthDelimited
                case 26:
                    // repeated
                    instance.Sign.Add(Msg.Sign.DeserializeLengthDelimited(stream));
                    instance.hasSign = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, SignInfo instance)
        {
            if (instance._Id != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance._Id));
            }
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.PlayerId);
            if (instance.Sign != null)
            {
                foreach (var i3 in instance.Sign)
                {
                    // Key for field: 3, LengthDelimited
                    stream.WriteByte(26);
                    ﻿using (var ms3 = new MemoryStream())
                    {
                        Msg.Sign.Serialize(ms3, i3);
                        // Length delimited byte array
                        uint ms3Length = (uint)ms3.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, ms3Length);
                        stream.Write(ms3.GetBuffer(), 0, (int)ms3Length);
                    }
                    
                }
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(SignInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class BGold
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BGold Deserialize(Stream stream)
        {
            BGold instance = new BGold();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BGold DeserializeLengthDelimited(Stream stream)
        {
            BGold instance = new BGold();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static BGold Deserialize(byte[] buffer)
        {
            BGold instance = new BGold();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.BGold Deserialize(byte[] buffer, Msg.BGold instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.BGold Deserialize(Stream stream, Msg.BGold instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Gold = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasGold = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Num = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasNum = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.BGold DeserializeLengthDelimited(Stream stream, Msg.BGold instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Gold = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasGold = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Num = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasNum = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, BGold instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Gold);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Num);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(BGold instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class BoardGold
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BoardGold Deserialize(Stream stream)
        {
            BoardGold instance = new BoardGold();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BoardGold DeserializeLengthDelimited(Stream stream)
        {
            BoardGold instance = new BoardGold();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static BoardGold Deserialize(byte[] buffer)
        {
            BoardGold instance = new BoardGold();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.BoardGold Deserialize(byte[] buffer, Msg.BoardGold instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.BoardGold Deserialize(Stream stream, Msg.BoardGold instance)
        {
            if (instance.Golds == null)
                instance.Golds = new List<Msg.BGold>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasType = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    // repeated
                    instance.Golds.Add(Msg.BGold.DeserializeLengthDelimited(stream));
                    instance.hasGolds = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.BoardGold DeserializeLengthDelimited(Stream stream, Msg.BoardGold instance)
        {
            if (instance.Golds == null)
                instance.Golds = new List<Msg.BGold>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasType = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    // repeated
                    instance.Golds.Add(Msg.BGold.DeserializeLengthDelimited(stream));
                    instance.hasGolds = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, BoardGold instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Type);
            if (instance.Golds != null)
            {
                foreach (var i2 in instance.Golds)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    ﻿using (var ms2 = new MemoryStream())
                    {
                        Msg.BGold.Serialize(ms2, i2);
                        // Length delimited byte array
                        uint ms2Length = (uint)ms2.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, ms2Length);
                        stream.Write(ms2.GetBuffer(), 0, (int)ms2Length);
                    }
                    
                }
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(BoardGold instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class Coin
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Coin Deserialize(Stream stream)
        {
            Coin instance = new Coin();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Coin DeserializeLengthDelimited(Stream stream)
        {
            Coin instance = new Coin();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Coin Deserialize(byte[] buffer)
        {
            Coin instance = new Coin();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.Coin Deserialize(byte[] buffer, Msg.Coin instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.Coin Deserialize(Stream stream, Msg.Coin instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Gold = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasGold = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasType = true;
                    continue;
                    // Field 4 Fixed32
                case 37:
                    instance.X = br.ReadSingle();
                    instance.hasX = true;
                    continue;
                    // Field 5 Fixed32
                case 45:
                    instance.Y = br.ReadSingle();
                    instance.hasY = true;
                    continue;
                    // Field 6 Fixed32
                case 53:
                    instance.Z = br.ReadSingle();
                    instance.hasZ = true;
                    continue;
                    // Field 7 Varint
                case 56:
                    instance.State = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasState = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.Coin DeserializeLengthDelimited(Stream stream, Msg.Coin instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Gold = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasGold = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasType = true;
                    continue;
                    // Field 4 Fixed32
                case 37:
                    instance.X = br.ReadSingle();
                    instance.hasX = true;
                    continue;
                    // Field 5 Fixed32
                case 45:
                    instance.Y = br.ReadSingle();
                    instance.hasY = true;
                    continue;
                    // Field 6 Fixed32
                case 53:
                    instance.Z = br.ReadSingle();
                    instance.hasZ = true;
                    continue;
                    // Field 7 Varint
                case 56:
                    instance.State = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasState = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Coin instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Gold);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Type);
            // Key for field: 4, Fixed32
            stream.WriteByte(37);
            bw.Write(instance.X);
            // Key for field: 5, Fixed32
            stream.WriteByte(45);
            bw.Write(instance.Y);
            // Key for field: 6, Fixed32
            stream.WriteByte(53);
            bw.Write(instance.Z);
            // Key for field: 7, Varint
            stream.WriteByte(56);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.State);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Coin instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class Map
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Map Deserialize(Stream stream)
        {
            Map instance = new Map();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Map DeserializeLengthDelimited(Stream stream)
        {
            Map instance = new Map();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Map Deserialize(byte[] buffer)
        {
            Map instance = new Map();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.Map Deserialize(byte[] buffer, Msg.Map instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.Map Deserialize(Stream stream, Msg.Map instance)
        {
            if (instance.Coins == null)
                instance.Coins = new List<Msg.Coin>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance._Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.has_Id = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.PlayerId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPlayerId = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.MapId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasMapId = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.Lock = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasLock = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.CollectGold = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasCollectGold = true;
                    continue;
                    // Field 6 Varint
                case 48:
                    instance.ShotGold = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasShotGold = true;
                    continue;
                    // Field 7 Varint
                case 56:
                    instance.BoardGold = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasBoardGold = true;
                    continue;
                    // Field 8 LengthDelimited
                case 66:
                    // repeated
                    instance.Coins.Add(Msg.Coin.DeserializeLengthDelimited(stream));
                    instance.hasCoins = true;
                    continue;
                    // Field 9 Varint
                case 72:
                    instance.RotateScore = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasRotateScore = true;
                    continue;
                    // Field 10 Varint
                case 80:
                    instance.Flag = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasFlag = true;
                    continue;
                    // Field 11 Varint
                case 88:
                    instance.Reward = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasReward = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.Map DeserializeLengthDelimited(Stream stream, Msg.Map instance)
        {
            if (instance.Coins == null)
                instance.Coins = new List<Msg.Coin>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance._Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.has_Id = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.PlayerId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPlayerId = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.MapId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasMapId = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.Lock = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasLock = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.CollectGold = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasCollectGold = true;
                    continue;
                    // Field 6 Varint
                case 48:
                    instance.ShotGold = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasShotGold = true;
                    continue;
                    // Field 7 Varint
                case 56:
                    instance.BoardGold = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasBoardGold = true;
                    continue;
                    // Field 8 LengthDelimited
                case 66:
                    // repeated
                    instance.Coins.Add(Msg.Coin.DeserializeLengthDelimited(stream));
                    instance.hasCoins = true;
                    continue;
                    // Field 9 Varint
                case 72:
                    instance.RotateScore = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasRotateScore = true;
                    continue;
                    // Field 10 Varint
                case 80:
                    instance.Flag = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasFlag = true;
                    continue;
                    // Field 11 Varint
                case 88:
                    instance.Reward = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasReward = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Map instance)
        {
            if (instance._Id != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance._Id));
            }
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.PlayerId);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.MapId);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Lock);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.CollectGold);
            // Key for field: 6, Varint
            stream.WriteByte(48);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.ShotGold);
            // Key for field: 7, Varint
            stream.WriteByte(56);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.BoardGold);
            if (instance.Coins != null)
            {
                foreach (var i8 in instance.Coins)
                {
                    // Key for field: 8, LengthDelimited
                    stream.WriteByte(66);
                    ﻿using (var ms8 = new MemoryStream())
                    {
                        Msg.Coin.Serialize(ms8, i8);
                        // Length delimited byte array
                        uint ms8Length = (uint)ms8.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, ms8Length);
                        stream.Write(ms8.GetBuffer(), 0, (int)ms8Length);
                    }
                    
                }
            }
            // Key for field: 9, Varint
            stream.WriteByte(72);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.RotateScore);
            // Key for field: 10, Varint
            stream.WriteByte(80);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Flag);
            // Key for field: 11, Varint
            stream.WriteByte(88);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Reward);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Map instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class MapData
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MapData Deserialize(Stream stream)
        {
            MapData instance = new MapData();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MapData DeserializeLengthDelimited(Stream stream)
        {
            MapData instance = new MapData();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static MapData Deserialize(byte[] buffer)
        {
            MapData instance = new MapData();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.MapData Deserialize(byte[] buffer, Msg.MapData instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.MapData Deserialize(Stream stream, Msg.MapData instance)
        {
            if (instance.Maps == null)
                instance.Maps = new List<Msg.Map>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    // repeated
                    instance.Maps.Add(Msg.Map.DeserializeLengthDelimited(stream));
                    instance.hasMaps = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.MapData DeserializeLengthDelimited(Stream stream, Msg.MapData instance)
        {
            if (instance.Maps == null)
                instance.Maps = new List<Msg.Map>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    // repeated
                    instance.Maps.Add(Msg.Map.DeserializeLengthDelimited(stream));
                    instance.hasMaps = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, MapData instance)
        {
            if (instance.Maps != null)
            {
                foreach (var i1 in instance.Maps)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿using (var ms1 = new MemoryStream())
                    {
                        Msg.Map.Serialize(ms1, i1);
                        // Length delimited byte array
                        uint ms1Length = (uint)ms1.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, ms1Length);
                        stream.Write(ms1.GetBuffer(), 0, (int)ms1Length);
                    }
                    
                }
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(MapData instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class Achievement
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Achievement Deserialize(Stream stream)
        {
            Achievement instance = new Achievement();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Achievement DeserializeLengthDelimited(Stream stream)
        {
            Achievement instance = new Achievement();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Achievement Deserialize(byte[] buffer)
        {
            Achievement instance = new Achievement();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.Achievement Deserialize(byte[] buffer, Msg.Achievement instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.Achievement Deserialize(Stream stream, Msg.Achievement instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance._Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.has_Id = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.PlayerId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPlayerId = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.AchId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasAchId = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.Num = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasNum = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.State = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasState = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.Achievement DeserializeLengthDelimited(Stream stream, Msg.Achievement instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance._Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.has_Id = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.PlayerId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPlayerId = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.AchId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasAchId = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.Num = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasNum = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.State = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasState = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Achievement instance)
        {
            if (instance._Id != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance._Id));
            }
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.PlayerId);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.AchId);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Num);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.State);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Achievement instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class AchievementData
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static AchievementData Deserialize(Stream stream)
        {
            AchievementData instance = new AchievementData();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static AchievementData DeserializeLengthDelimited(Stream stream)
        {
            AchievementData instance = new AchievementData();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static AchievementData Deserialize(byte[] buffer)
        {
            AchievementData instance = new AchievementData();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.AchievementData Deserialize(byte[] buffer, Msg.AchievementData instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.AchievementData Deserialize(Stream stream, Msg.AchievementData instance)
        {
            if (instance.Achievements == null)
                instance.Achievements = new List<Msg.Achievement>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    // repeated
                    instance.Achievements.Add(Msg.Achievement.DeserializeLengthDelimited(stream));
                    instance.hasAchievements = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.AchievementData DeserializeLengthDelimited(Stream stream, Msg.AchievementData instance)
        {
            if (instance.Achievements == null)
                instance.Achievements = new List<Msg.Achievement>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    // repeated
                    instance.Achievements.Add(Msg.Achievement.DeserializeLengthDelimited(stream));
                    instance.hasAchievements = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, AchievementData instance)
        {
            if (instance.Achievements != null)
            {
                foreach (var i1 in instance.Achievements)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿using (var ms1 = new MemoryStream())
                    {
                        Msg.Achievement.Serialize(ms1, i1);
                        // Length delimited byte array
                        uint ms1Length = (uint)ms1.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, ms1Length);
                        stream.Write(ms1.GetBuffer(), 0, (int)ms1Length);
                    }
                    
                }
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(AchievementData instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class FinishAchievement
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static FinishAchievement Deserialize(Stream stream)
        {
            FinishAchievement instance = new FinishAchievement();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static FinishAchievement DeserializeLengthDelimited(Stream stream)
        {
            FinishAchievement instance = new FinishAchievement();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static FinishAchievement Deserialize(byte[] buffer)
        {
            FinishAchievement instance = new FinishAchievement();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.FinishAchievement Deserialize(byte[] buffer, Msg.FinishAchievement instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.FinishAchievement Deserialize(Stream stream, Msg.FinishAchievement instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.FinishAchievement DeserializeLengthDelimited(Stream stream, Msg.FinishAchievement instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, FinishAchievement instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(FinishAchievement instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class DelAchievement
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static DelAchievement Deserialize(Stream stream)
        {
            DelAchievement instance = new DelAchievement();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static DelAchievement DeserializeLengthDelimited(Stream stream)
        {
            DelAchievement instance = new DelAchievement();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static DelAchievement Deserialize(byte[] buffer)
        {
            DelAchievement instance = new DelAchievement();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.DelAchievement Deserialize(byte[] buffer, Msg.DelAchievement instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.DelAchievement Deserialize(Stream stream, Msg.DelAchievement instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.DelAchievement DeserializeLengthDelimited(Stream stream, Msg.DelAchievement instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, DelAchievement instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(DelAchievement instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class EnterMap
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static EnterMap Deserialize(Stream stream)
        {
            EnterMap instance = new EnterMap();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static EnterMap DeserializeLengthDelimited(Stream stream)
        {
            EnterMap instance = new EnterMap();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static EnterMap Deserialize(byte[] buffer)
        {
            EnterMap instance = new EnterMap();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.EnterMap Deserialize(byte[] buffer, Msg.EnterMap instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.EnterMap Deserialize(Stream stream, Msg.EnterMap instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    if (instance.Map == null)
                        instance.Map = Msg.Map.DeserializeLengthDelimited(stream);
                    else
                        Msg.Map.DeserializeLengthDelimited(stream, instance.Map);
                    instance.hasMap = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.EnterMap DeserializeLengthDelimited(Stream stream, Msg.EnterMap instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    if (instance.Map == null)
                        instance.Map = Msg.Map.DeserializeLengthDelimited(stream);
                    else
                        Msg.Map.DeserializeLengthDelimited(stream, instance.Map);
                    instance.hasMap = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, EnterMap instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
            if (instance.Map != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                ﻿using (var ms2 = new MemoryStream())
                {
                    Msg.Map.Serialize(ms2, instance.Map);
                    // Length delimited byte array
                    uint ms2Length = (uint)ms2.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, ms2Length);
                    stream.Write(ms2.GetBuffer(), 0, (int)ms2Length);
                }
                
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(EnterMap instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class GameRotateStart
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GameRotateStart Deserialize(Stream stream)
        {
            GameRotateStart instance = new GameRotateStart();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GameRotateStart DeserializeLengthDelimited(Stream stream)
        {
            GameRotateStart instance = new GameRotateStart();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static GameRotateStart Deserialize(byte[] buffer)
        {
            GameRotateStart instance = new GameRotateStart();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.GameRotateStart Deserialize(byte[] buffer, Msg.GameRotateStart instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.GameRotateStart Deserialize(Stream stream, Msg.GameRotateStart instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Way = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasWay = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.GameRotateStart DeserializeLengthDelimited(Stream stream, Msg.GameRotateStart instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Way = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasWay = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, GameRotateStart instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Way);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(GameRotateStart instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class GameRotateResult
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GameRotateResult Deserialize(Stream stream)
        {
            GameRotateResult instance = new GameRotateResult();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GameRotateResult DeserializeLengthDelimited(Stream stream)
        {
            GameRotateResult instance = new GameRotateResult();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static GameRotateResult Deserialize(byte[] buffer)
        {
            GameRotateResult instance = new GameRotateResult();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.GameRotateResult Deserialize(byte[] buffer, Msg.GameRotateResult instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.GameRotateResult Deserialize(Stream stream, Msg.GameRotateResult instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Power = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPower = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.GameRotateResult DeserializeLengthDelimited(Stream stream, Msg.GameRotateResult instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Power = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPower = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, GameRotateResult instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Power);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(GameRotateResult instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class ShotGold
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ShotGold Deserialize(Stream stream)
        {
            ShotGold instance = new ShotGold();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ShotGold DeserializeLengthDelimited(Stream stream)
        {
            ShotGold instance = new ShotGold();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ShotGold Deserialize(byte[] buffer)
        {
            ShotGold instance = new ShotGold();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.ShotGold Deserialize(byte[] buffer, Msg.ShotGold instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.ShotGold Deserialize(Stream stream, Msg.ShotGold instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasType = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    if (instance.Coin == null)
                        instance.Coin = Msg.Coin.DeserializeLengthDelimited(stream);
                    else
                        Msg.Coin.DeserializeLengthDelimited(stream, instance.Coin);
                    instance.hasCoin = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.ShotGold DeserializeLengthDelimited(Stream stream, Msg.ShotGold instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasType = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    if (instance.Coin == null)
                        instance.Coin = Msg.Coin.DeserializeLengthDelimited(stream);
                    else
                        Msg.Coin.DeserializeLengthDelimited(stream, instance.Coin);
                    instance.hasCoin = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ShotGold instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Type);
            if (instance.Coin != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                ﻿using (var ms2 = new MemoryStream())
                {
                    Msg.Coin.Serialize(ms2, instance.Coin);
                    // Length delimited byte array
                    uint ms2Length = (uint)ms2.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, ms2Length);
                    stream.Write(ms2.GetBuffer(), 0, (int)ms2Length);
                }
                
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ShotGold instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class ShotResult
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ShotResult Deserialize(Stream stream)
        {
            ShotResult instance = new ShotResult();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ShotResult DeserializeLengthDelimited(Stream stream)
        {
            ShotResult instance = new ShotResult();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ShotResult Deserialize(byte[] buffer)
        {
            ShotResult instance = new ShotResult();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.ShotResult Deserialize(byte[] buffer, Msg.ShotResult instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.ShotResult Deserialize(Stream stream, Msg.ShotResult instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasType = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    if (instance.Coin == null)
                        instance.Coin = Msg.Coin.DeserializeLengthDelimited(stream);
                    else
                        Msg.Coin.DeserializeLengthDelimited(stream, instance.Coin);
                    instance.hasCoin = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.ShotResult DeserializeLengthDelimited(Stream stream, Msg.ShotResult instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasType = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    if (instance.Coin == null)
                        instance.Coin = Msg.Coin.DeserializeLengthDelimited(stream);
                    else
                        Msg.Coin.DeserializeLengthDelimited(stream, instance.Coin);
                    instance.hasCoin = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ShotResult instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Type);
            if (instance.Coin != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                ﻿using (var ms2 = new MemoryStream())
                {
                    Msg.Coin.Serialize(ms2, instance.Coin);
                    // Length delimited byte array
                    uint ms2Length = (uint)ms2.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, ms2Length);
                    stream.Write(ms2.GetBuffer(), 0, (int)ms2Length);
                }
                
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ShotResult instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class RGold
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static RGold Deserialize(Stream stream)
        {
            RGold instance = new RGold();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static RGold DeserializeLengthDelimited(Stream stream)
        {
            RGold instance = new RGold();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static RGold Deserialize(byte[] buffer)
        {
            RGold instance = new RGold();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.RGold Deserialize(byte[] buffer, Msg.RGold instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.RGold Deserialize(Stream stream, Msg.RGold instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Slot = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasSlot = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Power = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPower = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.RGold DeserializeLengthDelimited(Stream stream, Msg.RGold instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Slot = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasSlot = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Power = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPower = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, RGold instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Slot);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Power);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(RGold instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class ReduceGold
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ReduceGold Deserialize(Stream stream)
        {
            ReduceGold instance = new ReduceGold();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ReduceGold DeserializeLengthDelimited(Stream stream)
        {
            ReduceGold instance = new ReduceGold();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ReduceGold Deserialize(byte[] buffer)
        {
            ReduceGold instance = new ReduceGold();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.ReduceGold Deserialize(byte[] buffer, Msg.ReduceGold instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.ReduceGold Deserialize(Stream stream, Msg.ReduceGold instance)
        {
            if (instance.Coins == null)
                instance.Coins = new List<Msg.RGold>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 2 LengthDelimited
                case 18:
                    // repeated
                    instance.Coins.Add(Msg.RGold.DeserializeLengthDelimited(stream));
                    instance.hasCoins = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.ReduceGold DeserializeLengthDelimited(Stream stream, Msg.ReduceGold instance)
        {
            if (instance.Coins == null)
                instance.Coins = new List<Msg.RGold>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 2 LengthDelimited
                case 18:
                    // repeated
                    instance.Coins.Add(Msg.RGold.DeserializeLengthDelimited(stream));
                    instance.hasCoins = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ReduceGold instance)
        {
            if (instance.Coins != null)
            {
                foreach (var i2 in instance.Coins)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    ﻿using (var ms2 = new MemoryStream())
                    {
                        Msg.RGold.Serialize(ms2, i2);
                        // Length delimited byte array
                        uint ms2Length = (uint)ms2.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, ms2Length);
                        stream.Write(ms2.GetBuffer(), 0, (int)ms2Length);
                    }
                    
                }
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ReduceGold instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class PoolRotate
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PoolRotate Deserialize(Stream stream)
        {
            PoolRotate instance = new PoolRotate();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PoolRotate DeserializeLengthDelimited(Stream stream)
        {
            PoolRotate instance = new PoolRotate();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PoolRotate Deserialize(byte[] buffer)
        {
            PoolRotate instance = new PoolRotate();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.PoolRotate Deserialize(byte[] buffer, Msg.PoolRotate instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.PoolRotate Deserialize(Stream stream, Msg.PoolRotate instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.PoolRotate DeserializeLengthDelimited(Stream stream, Msg.PoolRotate instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PoolRotate instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PoolRotate instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class ItemChange
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ItemChange Deserialize(Stream stream)
        {
            ItemChange instance = new ItemChange();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ItemChange DeserializeLengthDelimited(Stream stream)
        {
            ItemChange instance = new ItemChange();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ItemChange Deserialize(byte[] buffer)
        {
            ItemChange instance = new ItemChange();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.ItemChange Deserialize(byte[] buffer, Msg.ItemChange instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.ItemChange Deserialize(Stream stream, Msg.ItemChange instance)
        {
            if (instance.Items == null)
                instance.Items = new List<Msg.Item>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    // repeated
                    instance.Items.Add(Msg.Item.DeserializeLengthDelimited(stream));
                    instance.hasItems = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.ItemChange DeserializeLengthDelimited(Stream stream, Msg.ItemChange instance)
        {
            if (instance.Items == null)
                instance.Items = new List<Msg.Item>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    // repeated
                    instance.Items.Add(Msg.Item.DeserializeLengthDelimited(stream));
                    instance.hasItems = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ItemChange instance)
        {
            if (instance.Items != null)
            {
                foreach (var i1 in instance.Items)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿using (var ms1 = new MemoryStream())
                    {
                        Msg.Item.Serialize(ms1, i1);
                        // Length delimited byte array
                        uint ms1Length = (uint)ms1.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, ms1Length);
                        stream.Write(ms1.GetBuffer(), 0, (int)ms1Length);
                    }
                    
                }
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ItemChange instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class AddItem
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static AddItem Deserialize(Stream stream)
        {
            AddItem instance = new AddItem();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static AddItem DeserializeLengthDelimited(Stream stream)
        {
            AddItem instance = new AddItem();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static AddItem Deserialize(byte[] buffer)
        {
            AddItem instance = new AddItem();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.AddItem Deserialize(byte[] buffer, Msg.AddItem instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.AddItem Deserialize(Stream stream, Msg.AddItem instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Num = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasNum = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.AddItem DeserializeLengthDelimited(Stream stream, Msg.AddItem instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Num = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasNum = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, AddItem instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Num);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(AddItem instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class AddCoins
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static AddCoins Deserialize(Stream stream)
        {
            AddCoins instance = new AddCoins();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static AddCoins DeserializeLengthDelimited(Stream stream)
        {
            AddCoins instance = new AddCoins();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static AddCoins Deserialize(byte[] buffer)
        {
            AddCoins instance = new AddCoins();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.AddCoins Deserialize(byte[] buffer, Msg.AddCoins instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.AddCoins Deserialize(Stream stream, Msg.AddCoins instance)
        {
            if (instance.Coins == null)
                instance.Coins = new List<Msg.Coin>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasType = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    // repeated
                    instance.Coins.Add(Msg.Coin.DeserializeLengthDelimited(stream));
                    instance.hasCoins = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.AddCoins DeserializeLengthDelimited(Stream stream, Msg.AddCoins instance)
        {
            if (instance.Coins == null)
                instance.Coins = new List<Msg.Coin>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasType = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    // repeated
                    instance.Coins.Add(Msg.Coin.DeserializeLengthDelimited(stream));
                    instance.hasCoins = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, AddCoins instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Type);
            if (instance.Coins != null)
            {
                foreach (var i2 in instance.Coins)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    ﻿using (var ms2 = new MemoryStream())
                    {
                        Msg.Coin.Serialize(ms2, i2);
                        // Length delimited byte array
                        uint ms2Length = (uint)ms2.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, ms2Length);
                        stream.Write(ms2.GetBuffer(), 0, (int)ms2Length);
                    }
                    
                }
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(AddCoins instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class GoldChange
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GoldChange Deserialize(Stream stream)
        {
            GoldChange instance = new GoldChange();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GoldChange DeserializeLengthDelimited(Stream stream)
        {
            GoldChange instance = new GoldChange();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static GoldChange Deserialize(byte[] buffer)
        {
            GoldChange instance = new GoldChange();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.GoldChange Deserialize(byte[] buffer, Msg.GoldChange instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.GoldChange Deserialize(Stream stream, Msg.GoldChange instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasType = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Gold = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                    instance.hasGold = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Slot = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasSlot = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.GoldChange DeserializeLengthDelimited(Stream stream, Msg.GoldChange instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasType = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Gold = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                    instance.hasGold = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Slot = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasSlot = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, GoldChange instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Type);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Gold);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Slot);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(GoldChange instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class AddExp
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static AddExp Deserialize(Stream stream)
        {
            AddExp instance = new AddExp();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static AddExp DeserializeLengthDelimited(Stream stream)
        {
            AddExp instance = new AddExp();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static AddExp Deserialize(byte[] buffer)
        {
            AddExp instance = new AddExp();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.AddExp Deserialize(byte[] buffer, Msg.AddExp instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.AddExp Deserialize(Stream stream, Msg.AddExp instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Exp = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasExp = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.AddExp DeserializeLengthDelimited(Stream stream, Msg.AddExp instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Exp = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasExp = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, AddExp instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Exp);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(AddExp instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class BindAccount
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BindAccount Deserialize(Stream stream)
        {
            BindAccount instance = new BindAccount();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BindAccount DeserializeLengthDelimited(Stream stream)
        {
            BindAccount instance = new BindAccount();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static BindAccount Deserialize(byte[] buffer)
        {
            BindAccount instance = new BindAccount();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.BindAccount Deserialize(byte[] buffer, Msg.BindAccount instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.BindAccount Deserialize(Stream stream, Msg.BindAccount instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Account = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasAccount = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Passwd = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPasswd = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Result = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasResult = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.BindAccount DeserializeLengthDelimited(Stream stream, Msg.BindAccount instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Account = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasAccount = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Passwd = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPasswd = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Result = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasResult = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, BindAccount instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Account);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Passwd);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Result);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(BindAccount instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class GetMapReward
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GetMapReward Deserialize(Stream stream)
        {
            GetMapReward instance = new GetMapReward();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GetMapReward DeserializeLengthDelimited(Stream stream)
        {
            GetMapReward instance = new GetMapReward();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static GetMapReward Deserialize(byte[] buffer)
        {
            GetMapReward instance = new GetMapReward();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.GetMapReward Deserialize(byte[] buffer, Msg.GetMapReward instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.GetMapReward Deserialize(Stream stream, Msg.GetMapReward instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.GetMapReward DeserializeLengthDelimited(Stream stream, Msg.GetMapReward instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, GetMapReward instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(GetMapReward instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class Rank
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Rank Deserialize(Stream stream)
        {
            Rank instance = new Rank();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Rank DeserializeLengthDelimited(Stream stream)
        {
            Rank instance = new Rank();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Rank Deserialize(byte[] buffer)
        {
            Rank instance = new Rank();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.Rank Deserialize(byte[] buffer, Msg.Rank instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.Rank Deserialize(Stream stream, Msg.Rank instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.PlayerId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPlayerId = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance._Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.has_Id = true;
                    continue;
                    // Field 3 LengthDelimited
                case 26:
                    instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasName = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.Head = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasHead = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.Lv = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasLv = true;
                    continue;
                    // Field 6 Varint
                case 48:
                    instance.Vip = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasVip = true;
                    continue;
                    // Field 7 Varint
                case 56:
                    instance.Gold = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasGold = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.Rank DeserializeLengthDelimited(Stream stream, Msg.Rank instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.PlayerId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPlayerId = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance._Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.has_Id = true;
                    continue;
                    // Field 3 LengthDelimited
                case 26:
                    instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasName = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.Head = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasHead = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.Lv = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasLv = true;
                    continue;
                    // Field 6 Varint
                case 48:
                    instance.Vip = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasVip = true;
                    continue;
                    // Field 7 Varint
                case 56:
                    instance.Gold = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasGold = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Rank instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.PlayerId);
            if (instance._Id != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance._Id));
            }
            if (instance.Name != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Name));
            }
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Head);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Lv);
            // Key for field: 6, Varint
            stream.WriteByte(48);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Vip);
            // Key for field: 7, Varint
            stream.WriteByte(56);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Gold);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Rank instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class RankData
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static RankData Deserialize(Stream stream)
        {
            RankData instance = new RankData();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static RankData DeserializeLengthDelimited(Stream stream)
        {
            RankData instance = new RankData();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static RankData Deserialize(byte[] buffer)
        {
            RankData instance = new RankData();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.RankData Deserialize(byte[] buffer, Msg.RankData instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.RankData Deserialize(Stream stream, Msg.RankData instance)
        {
            if (instance.Ranks == null)
                instance.Ranks = new List<Msg.Rank>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    // repeated
                    instance.Ranks.Add(Msg.Rank.DeserializeLengthDelimited(stream));
                    instance.hasRanks = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Slot = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasSlot = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.RankData DeserializeLengthDelimited(Stream stream, Msg.RankData instance)
        {
            if (instance.Ranks == null)
                instance.Ranks = new List<Msg.Rank>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    // repeated
                    instance.Ranks.Add(Msg.Rank.DeserializeLengthDelimited(stream));
                    instance.hasRanks = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Slot = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasSlot = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, RankData instance)
        {
            if (instance.Ranks != null)
            {
                foreach (var i1 in instance.Ranks)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿using (var ms1 = new MemoryStream())
                    {
                        Msg.Rank.Serialize(ms1, i1);
                        // Length delimited byte array
                        uint ms1Length = (uint)ms1.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, ms1Length);
                        stream.Write(ms1.GetBuffer(), 0, (int)ms1Length);
                    }
                    
                }
            }
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Slot);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(RankData instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class CsvActivity
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CsvActivity Deserialize(Stream stream)
        {
            CsvActivity instance = new CsvActivity();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CsvActivity DeserializeLengthDelimited(Stream stream)
        {
            CsvActivity instance = new CsvActivity();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CsvActivity Deserialize(byte[] buffer)
        {
            CsvActivity instance = new CsvActivity();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.CsvActivity Deserialize(byte[] buffer, Msg.CsvActivity instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.CsvActivity Deserialize(Stream stream, Msg.CsvActivity instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasName = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.StartTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasStartTime = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.OverTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasOverTime = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.Target = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasTarget = true;
                    continue;
                    // Field 6 Varint
                case 48:
                    instance.Num = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasNum = true;
                    continue;
                    // Field 7 Varint
                case 56:
                    instance.Gold = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasGold = true;
                    continue;
                    // Field 8 LengthDelimited
                case 66:
                    instance.Desc = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasDesc = true;
                    continue;
                    // Field 9 LengthDelimited
                case 74:
                    instance.Icon = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasIcon = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.CsvActivity DeserializeLengthDelimited(Stream stream, Msg.CsvActivity instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasName = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.StartTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasStartTime = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.OverTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasOverTime = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.Target = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasTarget = true;
                    continue;
                    // Field 6 Varint
                case 48:
                    instance.Num = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasNum = true;
                    continue;
                    // Field 7 Varint
                case 56:
                    instance.Gold = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasGold = true;
                    continue;
                    // Field 8 LengthDelimited
                case 66:
                    instance.Desc = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasDesc = true;
                    continue;
                    // Field 9 LengthDelimited
                case 74:
                    instance.Icon = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasIcon = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CsvActivity instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
            if (instance.Name != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Name));
            }
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.StartTime);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.OverTime);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Target);
            // Key for field: 6, Varint
            stream.WriteByte(48);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Num);
            // Key for field: 7, Varint
            stream.WriteByte(56);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Gold);
            if (instance.Desc != null)
            {
                // Key for field: 8, LengthDelimited
                stream.WriteByte(66);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Desc));
            }
            if (instance.Icon != null)
            {
                // Key for field: 9, LengthDelimited
                stream.WriteByte(74);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Icon));
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CsvActivity instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class CsvActivityData
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CsvActivityData Deserialize(Stream stream)
        {
            CsvActivityData instance = new CsvActivityData();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CsvActivityData DeserializeLengthDelimited(Stream stream)
        {
            CsvActivityData instance = new CsvActivityData();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CsvActivityData Deserialize(byte[] buffer)
        {
            CsvActivityData instance = new CsvActivityData();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.CsvActivityData Deserialize(byte[] buffer, Msg.CsvActivityData instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.CsvActivityData Deserialize(Stream stream, Msg.CsvActivityData instance)
        {
            if (instance.Activitys == null)
                instance.Activitys = new List<Msg.CsvActivity>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    // repeated
                    instance.Activitys.Add(Msg.CsvActivity.DeserializeLengthDelimited(stream));
                    instance.hasActivitys = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.CsvActivityData DeserializeLengthDelimited(Stream stream, Msg.CsvActivityData instance)
        {
            if (instance.Activitys == null)
                instance.Activitys = new List<Msg.CsvActivity>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    // repeated
                    instance.Activitys.Add(Msg.CsvActivity.DeserializeLengthDelimited(stream));
                    instance.hasActivitys = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CsvActivityData instance)
        {
            if (instance.Activitys != null)
            {
                foreach (var i1 in instance.Activitys)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿using (var ms1 = new MemoryStream())
                    {
                        Msg.CsvActivity.Serialize(ms1, i1);
                        // Length delimited byte array
                        uint ms1Length = (uint)ms1.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, ms1Length);
                        stream.Write(ms1.GetBuffer(), 0, (int)ms1Length);
                    }
                    
                }
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CsvActivityData instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class Activity
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Activity Deserialize(Stream stream)
        {
            Activity instance = new Activity();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Activity DeserializeLengthDelimited(Stream stream)
        {
            Activity instance = new Activity();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Activity Deserialize(byte[] buffer)
        {
            Activity instance = new Activity();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.Activity Deserialize(byte[] buffer, Msg.Activity instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.Activity Deserialize(Stream stream, Msg.Activity instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance._Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.has_Id = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.PlayerId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPlayerId = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.Num = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasNum = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.State = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasState = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.Activity DeserializeLengthDelimited(Stream stream, Msg.Activity instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance._Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.has_Id = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.PlayerId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPlayerId = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.Num = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasNum = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.State = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasState = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Activity instance)
        {
            if (instance._Id != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance._Id));
            }
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.PlayerId);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Num);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.State);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Activity instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class BuyBill
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BuyBill Deserialize(Stream stream)
        {
            BuyBill instance = new BuyBill();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BuyBill DeserializeLengthDelimited(Stream stream)
        {
            BuyBill instance = new BuyBill();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static BuyBill Deserialize(byte[] buffer)
        {
            BuyBill instance = new BuyBill();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.BuyBill Deserialize(byte[] buffer, Msg.BuyBill instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.BuyBill Deserialize(Stream stream, Msg.BuyBill instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance._Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.has_Id = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.PlayerId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPlayerId = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Sn = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasSn = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.Buyid = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasBuyid = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.Time = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasTime = true;
                    continue;
                    // Field 6 Fixed32
                case 53:
                    instance.Money = br.ReadSingle();
                    instance.hasMoney = true;
                    continue;
                    // Field 7 Varint
                case 56:
                    instance.Gold = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasGold = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.BuyBill DeserializeLengthDelimited(Stream stream, Msg.BuyBill instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance._Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.has_Id = true;
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.PlayerId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasPlayerId = true;
                    continue;
                    // Field 3 Varint
                case 24:
                    instance.Sn = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasSn = true;
                    continue;
                    // Field 4 Varint
                case 32:
                    instance.Buyid = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasBuyid = true;
                    continue;
                    // Field 5 Varint
                case 40:
                    instance.Time = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasTime = true;
                    continue;
                    // Field 6 Fixed32
                case 53:
                    instance.Money = br.ReadSingle();
                    instance.hasMoney = true;
                    continue;
                    // Field 7 Varint
                case 56:
                    instance.Gold = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasGold = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, BuyBill instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            if (instance._Id != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance._Id));
            }
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.PlayerId);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Sn);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Buyid);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Time);
            // Key for field: 6, Fixed32
            stream.WriteByte(53);
            bw.Write(instance.Money);
            // Key for field: 7, Varint
            stream.WriteByte(56);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Gold);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(BuyBill instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class FinishGuide
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static FinishGuide Deserialize(Stream stream)
        {
            FinishGuide instance = new FinishGuide();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static FinishGuide DeserializeLengthDelimited(Stream stream)
        {
            FinishGuide instance = new FinishGuide();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static FinishGuide Deserialize(byte[] buffer)
        {
            FinishGuide instance = new FinishGuide();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.FinishGuide Deserialize(byte[] buffer, Msg.FinishGuide instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.FinishGuide Deserialize(Stream stream, Msg.FinishGuide instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.FinishGuide DeserializeLengthDelimited(Stream stream, Msg.FinishGuide instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    instance.hasId = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, FinishGuide instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(FinishGuide instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    public partial class GetGiftWord
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GetGiftWord Deserialize(Stream stream)
        {
            GetGiftWord instance = new GetGiftWord();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GetGiftWord DeserializeLengthDelimited(Stream stream)
        {
            GetGiftWord instance = new GetGiftWord();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static GetGiftWord Deserialize(byte[] buffer)
        {
            GetGiftWord instance = new GetGiftWord();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Msg.GetGiftWord Deserialize(byte[] buffer, Msg.GetGiftWord instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Msg.GetGiftWord Deserialize(Stream stream, Msg.GetGiftWord instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Word = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasWord = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Msg.GetGiftWord DeserializeLengthDelimited(Stream stream, Msg.GetGiftWord instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Word = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    instance.hasWord = true;
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new IOException("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, GetGiftWord instance)
        {
            if (instance.Word != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Word));
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(GetGiftWord instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
}
